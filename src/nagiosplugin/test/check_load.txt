check_load sample plugin
========================

Invocation
----------

The check_load plugin follows is usually invoked from the command line. To
facilitate testing, we import it as Python module::

>>> from check_load import LoadCheck

Invoking check_load with the `-h` option gives the usual help message::

>>> import nagiosplugin
>>> c = nagiosplugin.Controller(LoadCheck, ['-h'])
>>> print c.stderr
Usage: ...
Check the current system load average.
...

Basic plugin usage
------------------

To demonstrate the plugin, we need to ensure repeatable load values. Therefore,
we overwrite the location of `/proc` files with faked ones for `loadavg` and
`cpuinfo`::

>>> import tempfile
>>> loadavg = tempfile.NamedTemporaryFile(prefix='loadavg')
>>> print >>loadavg, '0.14 0.91 0.85 1/255 13507\n'
>>> loadavg.flush()
>>> LoadCheck.loadavg = loadavg.name
>>> cpuinfo = tempfile.NamedTemporaryFile(prefix='cpuinfo')
>>> print >>cpuinfo, 'processor : 0\nvendor_id : fake\n\nprocessor : 1\nvendor_id : fake\n'
>>> cpuinfo.flush()
>>> LoadCheck.cpuinfo = cpuinfo.name

Invoking `check_load` without parameters, it reports the current load values::

>>> c = nagiosplugin.Controller(LoadCheck, [])
>>> print c.format()
LOAD OK - system load average is 0.14 0.91 0.85 ...

Warning and critical thresholds may be specified as usual with the `-w` and `-c`
options::

>>> c = nagiosplugin.Controller(LoadCheck, ['-w', '0.125:0.75'])
>>> print c.format()
LOAD WARNING - load5 value 0.91 exceeds warning range 0.125:0.75 ...


.. vim: set ft=rst:
